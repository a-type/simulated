interface Node {
  id: ID!
}

type Query {
  viewer: Viewer!
  node(id: ID!): Node
}

type Viewer implements Node {
  id: ID!
  scenarios(first: Int = 10, after: String): ScenarioConnection!
  scenario(id: ID!): Scenario
  state(id: ID!): State
  mapping(id: ID!): Mapping
}

type ScenarioConnection {
  edges: [ScenarioEdge!]!
  pageInfo: ScenarioPageInfo!
}

type ScenarioEdge {
  node: Scenario!
  cursor: String!
}

type ScenarioPageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
  endCursor: String
}

type Scenario implements Node {
  id: ID!
  """
  Friendly name to quickly identify the purpose of the scenario
  """
  name: String!
  """
  List of possible states the scenario can be in. States are exclusive.
  """
  possibleStates(first: Int = 10, after: String): ScenarioStateConnection!
  """
  The currently valid state of this scenario.
  """
  currentState: State
  """
  The default state is selected on simulator startup and will be reverted to
  automatically if expirationDurationSeconds is used.
  """
  defaultState: State
  """
  After the specified number of seconds, the scenario will revert to the default
  state. If 0, the scenario will never revert. For 0 expiration values, ensure
  your state machine is cyclical so that the scenario does not enter an irreversible
  state, if so desired.
  """
  expirationDurationSeconds: Float!
  """
  If disabled, no mappings related to scenario states will be tested for any incoming
  requests.
  """
  disabled: Boolean!
  """
  UTC formatted string
  """
  createdAt: String!
  """
  UTC formatted string
  """
  updatedAt: String!
}

type ScenarioStateConnection {
  edges: [ScenarioStateEdge!]!
  pageInfo: ScenarioStatePageInfo!
}

type ScenarioStateEdge {
  node: State!
  cursor: String!
}

type ScenarioStatePageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
  endCursor: String
}

type State implements Node {
  id: ID!
  name: String!
  mappings(first: Int = 10, after: String): StateMappingConnection!
  """
  UTC formatted string
  """
  createdAt: String!
  """
  UTC formatted string
  """
  updatedAt: String!
}

type StateMappingConnection {
  edges: [StateMappingEdge!]!
  pageInfo: StateMappingPageInfo!
}

type StateMappingEdge {
  node: Mapping!
  cursor: String!
}

type StateMappingPageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
  endCursor: String
}

type Mapping implements Node {
  id: ID!
  pathMatcher: Matcher
  response: Response
  trigger: Trigger
  priority: Int!
  """
  UTC formatted string
  """
  createdAt: String!
  """
  UTC formatted string
  """
  updatedAt: String!
}

enum MatcherKind {
  Literal
}

interface Matcher {
  kind: MatcherKind!
}

type LiteralMatcher implements Matcher {
  kind: MatcherKind!
  value: String!
}

type Response {
  body: ResponseBody!
}

enum ResponseBodyKind {
  Template
}

interface ResponseBody {
  kind: ResponseBodyKind!
}

type TemplateResponseBody implements ResponseBody {
  kind: ResponseBodyKind!
  value: String!
}

type Trigger {
  targetState: State!
}

type Mutation {
  """
  Adds a new, empty scenario
  """
  addScenario(input: AddScenarioInput!): AddScenarioResult!
  """
  Updates the basic information of a scenario
  """
  setScenarioDetails(input: SetScenarioDetailsInput!): SetScenarioDetailsResult!
  """
  Changes the default state of a scenario, which it will return to
  upon expiration or when the service initializes on startup
  """
  setScenarioDefaultState(
    input: SetScenarioDefaultStateInput!
  ): SetScenarioDefaultStateResult!
  """
  Changes the expiration time of a scenario, at which point it will
  reset back to its default state
  """
  setScenarioExpiration(
    input: SetScenarioExpirationInput!
  ): SetScenarioExpirationResult!
  """
  Removes the scenario from consideration for future simulated requests. Idempotent.
  """
  disableScenario(input: DisableScenarioInput!): DisableScenarioResult!
  """
  Enables the scenario for consideration for future simulated requests. Idempotent.
  """
  enableScenario(input: EnableScenarioInput!): EnableScenarioResult!
  """
  Deletes a particular scenario
  """
  deleteScenario(input: DeleteScenarioInput!): DeleteScenarioResult!
  """
  Adds a state to a scenario. Every scenario has a default "Initial" state
  """
  addScenarioState(input: AddScenarioStateInput!): AddScenarioStateResult!
  """
  Updates the basic information of a state
  """
  setStateDetails(input: SetStateDetailsInput!): SetStateDetailsResult!
  """
  Deletes a particular state, removing it from its parent scenario
  """
  deleteState(input: DeleteStateInput!): DeleteStateResult!
  """
  Adds a request mapping to a scenario state
  """
  addStateMapping(input: AddStateMappingInput!): AddStateMappingResult!
  """
  Configures a mapping with a simulated response to send back to the client
  """
  setMappingResponse(input: SetMappingResponseInput!): SetMappingResponseResult!
  """
  Sets a trigger to change scenario state on a particular request mapping. When
  the request mapping is executed, the trigger will transition the parent scenario
  into the target state
  """
  setMappingTrigger(input: SetMappingTriggerInput!): SetMappingTriggerResult!
  """
  Updates the priority level of a mapping
  """
  setMappingPriority(input: SetMappingPriorityInput!): SetMappingPriorityResult!
  """
  Deletes a particular mapping, removing it from its parent state
  """
  deleteMapping(input: DeleteMappingInput!): DeleteMappingResult!
}

input AddScenarioInput {
  name: String
}

type AddScenarioResult {
  scenario: Scenario!
  scenarioEdge: ScenarioEdge!
}

input SetScenarioDetailsInput {
  scenarioId: ID!
  name: String
}

type SetScenarioDetailsResult {
  scenario: Scenario!
}

input SetScenarioDefaultStateInput {
  scenarioId: ID!
  stateId: ID!
}

type SetScenarioDefaultStateResult {
  scenario: Scenario!
}

input SetScenarioExpirationInput {
  scenarioId: ID!
  expirationDurationSeconds: Float!
}

type SetScenarioExpirationResult {
  scenario: Scenario!
}

input DisableScenarioInput {
  scenarioId: ID!
}

type DisableScenarioResult {
  scenario: Scenario!
}

input EnableScenarioInput {
  scenarioId: ID!
}

type EnableScenarioResult {
  scenario: Scenario!
}

input DeleteScenarioInput {
  scenarioId: ID!
}

type DeleteScenarioResult {
  scenario: Scenario!
  scenarioEdge: ScenarioEdge!
}

input AddScenarioStateInput {
  scenarioId: ID!
  state: AddStateInput!
}

input AddStateInput {
  name: String!
}

type AddScenarioStateResult {
  scenario: Scenario!
  state: State!
  stateEdge: ScenarioStateEdge!
}

input AddStateMappingInput {
  stateId: ID!
  mapping: AddMappingInput!
}

input AddMappingInput {
  pathMatcher: AddMatcherInput
  response: AddResponseInput
  trigger: AddTriggerInput
  priority: Int!
}

"""
All fields are exclusive; choose one
"""
input AddMatcherInput {
  literal: AddLiteralMatcherInput
}

input AddLiteralMatcherInput {
  value: String!
}

type AddStateMappingResult {
  state: State!
  mapping: Mapping!
  mappingEdge: StateMappingEdge!
}

input SetMappingResponseInput {
  mappingId: ID!
  response: AddResponseInput!
}

input AddResponseInput {
  body: AddResponseBodyInput!
}

input AddResponseBodyInput {
  template: AddTemplateResponseBodyInput
}

input AddTemplateResponseBodyInput {
  value: String!
}

type SetMappingResponseResult {
  mapping: Mapping!
}

input SetMappingTriggerInput {
  mappingId: ID!
  trigger: AddTriggerInput!
}

input AddTriggerInput {
  targetState: ID!
}

type SetMappingTriggerResult {
  mapping: Mapping!
}

input SetMappingPriorityInput {
  mappingId: ID!
  priority: Int!
}

type SetMappingPriorityResult {
  mapping: Mapping!
}

input DeleteMappingInput {
  mappingId: ID!
}

type DeleteMappingResult {
  mapping: Mapping!
  mappingEdge: StateMappingEdge!
  state: State!
}

input DeleteStateInput {
  stateId: ID!
}

type DeleteStateResult {
  state: State!
  stateEdge: ScenarioStateEdge!
  scenario: Scenario!
}

input SetStateDetailsInput {
  stateId: ID!
  name: String
}

type SetStateDetailsResult {
  state: State!
}
